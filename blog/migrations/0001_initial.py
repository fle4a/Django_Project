# Generated by Django 4.1.7 on 2023-03-31 15:45

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DismissalArticle',
            fields=[
                ('article_id', models.AutoField(primary_key=True, serialize=False)),
                ('article_name', models.CharField(max_length=50)),
                ('reason', models.CharField(max_length=100)),
                ('article_number', models.IntegerField()),
                ('paragraph_number', models.IntegerField()),
            ],
            options={
                'db_table': 'dismissal_articles',
            },
        ),
        migrations.CreateModel(
            name='Employees',
            fields=[
                ('emp_id', models.AutoField(primary_key=True, serialize=False)),
                ('last_name', models.CharField(max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('position', models.CharField(max_length=50)),
                ('department', models.CharField(max_length=50)),
                ('hire_date', models.DateField()),
            ],
            options={
                'db_table': 'employees',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('doc_id', models.AutoField(primary_key=True, serialize=False)),
                ('doc_number', models.CharField(max_length=50)),
                ('registration_date', models.DateField()),
                ('dismissal_date', models.DateField(blank=True, null=True)),
                ('compensation', models.DecimalField(decimal_places=2, max_digits=10)),
                ('dismissal_article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.dismissalarticle')),
                ('emp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.employees')),
            ],
            options={
                'db_table': 'documents',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_name', models.CharField(max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(max_length=20)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('password', models.CharField(max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user_reg',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
